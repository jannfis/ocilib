// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	distribution "github.com/distribution/distribution/v3"
	digest "github.com/opencontainers/go-digest"

	mock "github.com/stretchr/testify/mock"
)

// BlobDescriptorService is an autogenerated mock type for the BlobDescriptorService type
type BlobDescriptorService struct {
	mock.Mock
}

// Clear provides a mock function with given fields: ctx, dgst
func (_m *BlobDescriptorService) Clear(ctx context.Context, dgst digest.Digest) error {
	ret := _m.Called(ctx, dgst)

	if len(ret) == 0 {
		panic("no return value specified for Clear")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, digest.Digest) error); ok {
		r0 = rf(ctx, dgst)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetDescriptor provides a mock function with given fields: ctx, dgst, desc
func (_m *BlobDescriptorService) SetDescriptor(ctx context.Context, dgst digest.Digest, desc distribution.Descriptor) error {
	ret := _m.Called(ctx, dgst, desc)

	if len(ret) == 0 {
		panic("no return value specified for SetDescriptor")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, digest.Digest, distribution.Descriptor) error); ok {
		r0 = rf(ctx, dgst, desc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stat provides a mock function with given fields: ctx, dgst
func (_m *BlobDescriptorService) Stat(ctx context.Context, dgst digest.Digest) (distribution.Descriptor, error) {
	ret := _m.Called(ctx, dgst)

	if len(ret) == 0 {
		panic("no return value specified for Stat")
	}

	var r0 distribution.Descriptor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, digest.Digest) (distribution.Descriptor, error)); ok {
		return rf(ctx, dgst)
	}
	if rf, ok := ret.Get(0).(func(context.Context, digest.Digest) distribution.Descriptor); ok {
		r0 = rf(ctx, dgst)
	} else {
		r0 = ret.Get(0).(distribution.Descriptor)
	}

	if rf, ok := ret.Get(1).(func(context.Context, digest.Digest) error); ok {
		r1 = rf(ctx, dgst)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBlobDescriptorService creates a new instance of BlobDescriptorService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlobDescriptorService(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlobDescriptorService {
	mock := &BlobDescriptorService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
