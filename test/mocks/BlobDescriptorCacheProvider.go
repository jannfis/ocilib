// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	distribution "github.com/distribution/distribution/v3"
	digest "github.com/opencontainers/go-digest"

	mock "github.com/stretchr/testify/mock"
)

// BlobDescriptorCacheProvider is an autogenerated mock type for the BlobDescriptorCacheProvider type
type BlobDescriptorCacheProvider struct {
	mock.Mock
}

// Clear provides a mock function with given fields: ctx, dgst
func (_m *BlobDescriptorCacheProvider) Clear(ctx context.Context, dgst digest.Digest) error {
	ret := _m.Called(ctx, dgst)

	if len(ret) == 0 {
		panic("no return value specified for Clear")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, digest.Digest) error); ok {
		r0 = rf(ctx, dgst)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepositoryScoped provides a mock function with given fields: repo
func (_m *BlobDescriptorCacheProvider) RepositoryScoped(repo string) (distribution.BlobDescriptorService, error) {
	ret := _m.Called(repo)

	if len(ret) == 0 {
		panic("no return value specified for RepositoryScoped")
	}

	var r0 distribution.BlobDescriptorService
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (distribution.BlobDescriptorService, error)); ok {
		return rf(repo)
	}
	if rf, ok := ret.Get(0).(func(string) distribution.BlobDescriptorService); ok {
		r0 = rf(repo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(distribution.BlobDescriptorService)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(repo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetDescriptor provides a mock function with given fields: ctx, dgst, desc
func (_m *BlobDescriptorCacheProvider) SetDescriptor(ctx context.Context, dgst digest.Digest, desc distribution.Descriptor) error {
	ret := _m.Called(ctx, dgst, desc)

	if len(ret) == 0 {
		panic("no return value specified for SetDescriptor")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, digest.Digest, distribution.Descriptor) error); ok {
		r0 = rf(ctx, dgst, desc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stat provides a mock function with given fields: ctx, dgst
func (_m *BlobDescriptorCacheProvider) Stat(ctx context.Context, dgst digest.Digest) (distribution.Descriptor, error) {
	ret := _m.Called(ctx, dgst)

	if len(ret) == 0 {
		panic("no return value specified for Stat")
	}

	var r0 distribution.Descriptor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, digest.Digest) (distribution.Descriptor, error)); ok {
		return rf(ctx, dgst)
	}
	if rf, ok := ret.Get(0).(func(context.Context, digest.Digest) distribution.Descriptor); ok {
		r0 = rf(ctx, dgst)
	} else {
		r0 = ret.Get(0).(distribution.Descriptor)
	}

	if rf, ok := ret.Get(1).(func(context.Context, digest.Digest) error); ok {
		r1 = rf(ctx, dgst)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBlobDescriptorCacheProvider creates a new instance of BlobDescriptorCacheProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlobDescriptorCacheProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlobDescriptorCacheProvider {
	mock := &BlobDescriptorCacheProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
