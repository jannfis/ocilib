// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	distribution "github.com/distribution/distribution/v3"
	digest "github.com/opencontainers/go-digest"

	http "net/http"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// BlobStore is an autogenerated mock type for the BlobStore type
type BlobStore struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, options
func (_m *BlobStore) Create(ctx context.Context, options ...distribution.BlobCreateOption) (distribution.BlobWriter, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 distribution.BlobWriter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...distribution.BlobCreateOption) (distribution.BlobWriter, error)); ok {
		return rf(ctx, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...distribution.BlobCreateOption) distribution.BlobWriter); ok {
		r0 = rf(ctx, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(distribution.BlobWriter)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...distribution.BlobCreateOption) error); ok {
		r1 = rf(ctx, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, dgst
func (_m *BlobStore) Delete(ctx context.Context, dgst digest.Digest) error {
	ret := _m.Called(ctx, dgst)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, digest.Digest) error); ok {
		r0 = rf(ctx, dgst)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, dgst
func (_m *BlobStore) Get(ctx context.Context, dgst digest.Digest) ([]byte, error) {
	ret := _m.Called(ctx, dgst)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, digest.Digest) ([]byte, error)); ok {
		return rf(ctx, dgst)
	}
	if rf, ok := ret.Get(0).(func(context.Context, digest.Digest) []byte); ok {
		r0 = rf(ctx, dgst)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, digest.Digest) error); ok {
		r1 = rf(ctx, dgst)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Open provides a mock function with given fields: ctx, dgst
func (_m *BlobStore) Open(ctx context.Context, dgst digest.Digest) (io.ReadSeekCloser, error) {
	ret := _m.Called(ctx, dgst)

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 io.ReadSeekCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, digest.Digest) (io.ReadSeekCloser, error)); ok {
		return rf(ctx, dgst)
	}
	if rf, ok := ret.Get(0).(func(context.Context, digest.Digest) io.ReadSeekCloser); ok {
		r0 = rf(ctx, dgst)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadSeekCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, digest.Digest) error); ok {
		r1 = rf(ctx, dgst)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Put provides a mock function with given fields: ctx, mediaType, p
func (_m *BlobStore) Put(ctx context.Context, mediaType string, p []byte) (distribution.Descriptor, error) {
	ret := _m.Called(ctx, mediaType, p)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 distribution.Descriptor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) (distribution.Descriptor, error)); ok {
		return rf(ctx, mediaType, p)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) distribution.Descriptor); ok {
		r0 = rf(ctx, mediaType, p)
	} else {
		r0 = ret.Get(0).(distribution.Descriptor)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []byte) error); ok {
		r1 = rf(ctx, mediaType, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Resume provides a mock function with given fields: ctx, id
func (_m *BlobStore) Resume(ctx context.Context, id string) (distribution.BlobWriter, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Resume")
	}

	var r0 distribution.BlobWriter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (distribution.BlobWriter, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) distribution.BlobWriter); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(distribution.BlobWriter)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServeBlob provides a mock function with given fields: ctx, w, r, dgst
func (_m *BlobStore) ServeBlob(ctx context.Context, w http.ResponseWriter, r *http.Request, dgst digest.Digest) error {
	ret := _m.Called(ctx, w, r, dgst)

	if len(ret) == 0 {
		panic("no return value specified for ServeBlob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, http.ResponseWriter, *http.Request, digest.Digest) error); ok {
		r0 = rf(ctx, w, r, dgst)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stat provides a mock function with given fields: ctx, dgst
func (_m *BlobStore) Stat(ctx context.Context, dgst digest.Digest) (distribution.Descriptor, error) {
	ret := _m.Called(ctx, dgst)

	if len(ret) == 0 {
		panic("no return value specified for Stat")
	}

	var r0 distribution.Descriptor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, digest.Digest) (distribution.Descriptor, error)); ok {
		return rf(ctx, dgst)
	}
	if rf, ok := ret.Get(0).(func(context.Context, digest.Digest) distribution.Descriptor); ok {
		r0 = rf(ctx, dgst)
	} else {
		r0 = ret.Get(0).(distribution.Descriptor)
	}

	if rf, ok := ret.Get(1).(func(context.Context, digest.Digest) error); ok {
		r1 = rf(ctx, dgst)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBlobStore creates a new instance of BlobStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlobStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlobStore {
	mock := &BlobStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
