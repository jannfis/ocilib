// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	distribution "github.com/distribution/distribution/v3"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// BlobWriter is an autogenerated mock type for the BlobWriter type
type BlobWriter struct {
	mock.Mock
}

// Cancel provides a mock function with given fields: ctx
func (_m *BlobWriter) Cancel(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Cancel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *BlobWriter) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Commit provides a mock function with given fields: ctx, provisional
func (_m *BlobWriter) Commit(ctx context.Context, provisional distribution.Descriptor) (distribution.Descriptor, error) {
	ret := _m.Called(ctx, provisional)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 distribution.Descriptor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, distribution.Descriptor) (distribution.Descriptor, error)); ok {
		return rf(ctx, provisional)
	}
	if rf, ok := ret.Get(0).(func(context.Context, distribution.Descriptor) distribution.Descriptor); ok {
		r0 = rf(ctx, provisional)
	} else {
		r0 = ret.Get(0).(distribution.Descriptor)
	}

	if rf, ok := ret.Get(1).(func(context.Context, distribution.Descriptor) error); ok {
		r1 = rf(ctx, provisional)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ID provides a mock function with given fields:
func (_m *BlobWriter) ID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ReadFrom provides a mock function with given fields: r
func (_m *BlobWriter) ReadFrom(r io.Reader) (int64, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ReadFrom")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(io.Reader) (int64, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(io.Reader) int64); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(io.Reader) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Size provides a mock function with given fields:
func (_m *BlobWriter) Size() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// StartedAt provides a mock function with given fields:
func (_m *BlobWriter) StartedAt() time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for StartedAt")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// Write provides a mock function with given fields: p
func (_m *BlobWriter) Write(p []byte) (int, error) {
	ret := _m.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return rf(p)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBlobWriter creates a new instance of BlobWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlobWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlobWriter {
	mock := &BlobWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
