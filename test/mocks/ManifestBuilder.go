// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	distribution "github.com/distribution/distribution/v3"
	mock "github.com/stretchr/testify/mock"
)

// ManifestBuilder is an autogenerated mock type for the ManifestBuilder type
type ManifestBuilder struct {
	mock.Mock
}

// AppendReference provides a mock function with given fields: dependency
func (_m *ManifestBuilder) AppendReference(dependency distribution.Describable) error {
	ret := _m.Called(dependency)

	if len(ret) == 0 {
		panic("no return value specified for AppendReference")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(distribution.Describable) error); ok {
		r0 = rf(dependency)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Build provides a mock function with given fields: ctx
func (_m *ManifestBuilder) Build(ctx context.Context) (distribution.Manifest, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Build")
	}

	var r0 distribution.Manifest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (distribution.Manifest, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) distribution.Manifest); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(distribution.Manifest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// References provides a mock function with given fields:
func (_m *ManifestBuilder) References() []distribution.Descriptor {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for References")
	}

	var r0 []distribution.Descriptor
	if rf, ok := ret.Get(0).(func() []distribution.Descriptor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]distribution.Descriptor)
		}
	}

	return r0
}

// NewManifestBuilder creates a new instance of ManifestBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManifestBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *ManifestBuilder {
	mock := &ManifestBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
