// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	digest "github.com/opencontainers/go-digest"

	mock "github.com/stretchr/testify/mock"
)

// ManifestEnumerator is an autogenerated mock type for the ManifestEnumerator type
type ManifestEnumerator struct {
	mock.Mock
}

// Enumerate provides a mock function with given fields: ctx, ingester
func (_m *ManifestEnumerator) Enumerate(ctx context.Context, ingester func(digest.Digest) error) error {
	ret := _m.Called(ctx, ingester)

	if len(ret) == 0 {
		panic("no return value specified for Enumerate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(digest.Digest) error) error); ok {
		r0 = rf(ctx, ingester)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewManifestEnumerator creates a new instance of ManifestEnumerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManifestEnumerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *ManifestEnumerator {
	mock := &ManifestEnumerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
