// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	distribution "github.com/distribution/distribution/v3"
	mock "github.com/stretchr/testify/mock"
)

// UnmarshalFunc is an autogenerated mock type for the UnmarshalFunc type
type UnmarshalFunc struct {
	mock.Mock
}

// Execute provides a mock function with given fields: _a0
func (_m *UnmarshalFunc) Execute(_a0 []byte) (distribution.Manifest, distribution.Descriptor, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 distribution.Manifest
	var r1 distribution.Descriptor
	var r2 error
	if rf, ok := ret.Get(0).(func([]byte) (distribution.Manifest, distribution.Descriptor, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]byte) distribution.Manifest); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(distribution.Manifest)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) distribution.Descriptor); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(distribution.Descriptor)
	}

	if rf, ok := ret.Get(2).(func([]byte) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewUnmarshalFunc creates a new instance of UnmarshalFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUnmarshalFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *UnmarshalFunc {
	mock := &UnmarshalFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
