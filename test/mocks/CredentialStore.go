// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	url "net/url"

	mock "github.com/stretchr/testify/mock"
)

// CredentialStore is an autogenerated mock type for the CredentialStore type
type CredentialStore struct {
	mock.Mock
}

// Basic provides a mock function with given fields: _a0
func (_m *CredentialStore) Basic(_a0 *url.URL) (string, string) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Basic")
	}

	var r0 string
	var r1 string
	if rf, ok := ret.Get(0).(func(*url.URL) (string, string)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*url.URL) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*url.URL) string); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// RefreshToken provides a mock function with given fields: _a0, _a1
func (_m *CredentialStore) RefreshToken(_a0 *url.URL, _a1 string) string {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(*url.URL, string) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SetRefreshToken provides a mock function with given fields: realm, service, token
func (_m *CredentialStore) SetRefreshToken(realm *url.URL, service string, token string) {
	_m.Called(realm, service, token)
}

// NewCredentialStore creates a new instance of CredentialStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCredentialStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *CredentialStore {
	mock := &CredentialStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
