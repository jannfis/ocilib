// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	reference "github.com/distribution/distribution/v3/reference"
	mock "github.com/stretchr/testify/mock"
)

// normalizedNamed is an autogenerated mock type for the normalizedNamed type
type normalizedNamed struct {
	mock.Mock
}

// Familiar provides a mock function with given fields:
func (_m *normalizedNamed) Familiar() reference.Named {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Familiar")
	}

	var r0 reference.Named
	if rf, ok := ret.Get(0).(func() reference.Named); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(reference.Named)
		}
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *normalizedNamed) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// String provides a mock function with given fields:
func (_m *normalizedNamed) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// newNormalizedNamed creates a new instance of normalizedNamed. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newNormalizedNamed(t interface {
	mock.TestingT
	Cleanup(func())
}) *normalizedNamed {
	mock := &normalizedNamed{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
