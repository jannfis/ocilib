// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Tagged is an autogenerated mock type for the Tagged type
type Tagged struct {
	mock.Mock
}

// String provides a mock function with given fields:
func (_m *Tagged) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Tag provides a mock function with given fields:
func (_m *Tagged) Tag() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Tag")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewTagged creates a new instance of Tagged. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTagged(t interface {
	mock.TestingT
	Cleanup(func())
}) *Tagged {
	mock := &Tagged{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
