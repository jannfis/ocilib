// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	distribution "github.com/distribution/distribution/v3"
	mock "github.com/stretchr/testify/mock"

	reference "github.com/distribution/distribution/v3/reference"
)

// Namespace is an autogenerated mock type for the Namespace type
type Namespace struct {
	mock.Mock
}

// BlobStatter provides a mock function with given fields:
func (_m *Namespace) BlobStatter() distribution.BlobStatter {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BlobStatter")
	}

	var r0 distribution.BlobStatter
	if rf, ok := ret.Get(0).(func() distribution.BlobStatter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(distribution.BlobStatter)
		}
	}

	return r0
}

// Blobs provides a mock function with given fields:
func (_m *Namespace) Blobs() distribution.BlobEnumerator {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Blobs")
	}

	var r0 distribution.BlobEnumerator
	if rf, ok := ret.Get(0).(func() distribution.BlobEnumerator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(distribution.BlobEnumerator)
		}
	}

	return r0
}

// Repositories provides a mock function with given fields: ctx, repos, last
func (_m *Namespace) Repositories(ctx context.Context, repos []string, last string) (int, error) {
	ret := _m.Called(ctx, repos, last)

	if len(ret) == 0 {
		panic("no return value specified for Repositories")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, string) (int, error)); ok {
		return rf(ctx, repos, last)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, string) int); ok {
		r0 = rf(ctx, repos, last)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, string) error); ok {
		r1 = rf(ctx, repos, last)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository provides a mock function with given fields: ctx, name
func (_m *Namespace) Repository(ctx context.Context, name reference.Named) (distribution.Repository, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Repository")
	}

	var r0 distribution.Repository
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, reference.Named) (distribution.Repository, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, reference.Named) distribution.Repository); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(distribution.Repository)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, reference.Named) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Scope provides a mock function with given fields:
func (_m *Namespace) Scope() distribution.Scope {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Scope")
	}

	var r0 distribution.Scope
	if rf, ok := ret.Get(0).(func() distribution.Scope); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(distribution.Scope)
		}
	}

	return r0
}

// NewNamespace creates a new instance of Namespace. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNamespace(t interface {
	mock.TestingT
	Cleanup(func())
}) *Namespace {
	mock := &Namespace{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
